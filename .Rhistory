View(test_data_2)
load_all()
# Test case 3
test_that("accuracy_plot produces the correct y-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ylab(plot)$label, ylab(expected_accuracy_plot)$label)
})
# Test case 3
test_that("accuracy_plot produces the correct y-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ylab(plot)$label, ylab(expected_accuracy_plot)$label)
})
styler:::style_active_file()
load_all()
# Test case 3
test_that("accuracy_plot produces the correct y-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ylab(plot)$label, ylab(expected_accuracy_plot)$label)
})
load_all()
# Test case 3
test_that("accuracy_plot produces the correct y-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ylab(plot)$label, ylab(expected_accuracy_plot)$label)
})
typeof(test_data_2)
load_all()
# Test case 3
test_that("accuracy_plot produces the correct y-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(data.frame(test_data_2), aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(data.frame(test_data_2),
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ylab(plot)$label, ylab(expected_accuracy_plot)$label)
})
typeof(data.frame(test_data_2))
data.frame(test_data_2)
typeof(test_data_2)
typeof(do.call(rbind.data.frame, test_data_2))
# Test case 3
test_that("accuracy_plot produces the correct y-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(do.call(rbind.data.frame, test_data_2), aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(do.call(rbind.data.frame, test_data_2),
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ylab(plot)$label, ylab(expected_accuracy_plot)$label)
})
library(plyr)
View(test_data_2)
test_data_2 <- ldply(test_data_2, data.frame)
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
test_data_2 <- ldply(test_data_2, data.frame)
typeof(test_data_2)
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
) %>% as_tibble()
library(dplyr)
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
) %>% as_tibble()
typeof(test_data_2)
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
) %>% as_tibble()
typeof(test_data_2)
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
) %>% as.data.frame(do.call(cbind))
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
test_data_2 <- as.data.frame(do.call(cbind, test_data_2))
typeof(test_data_2)
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
test_data_22 <- as.data.frame(do.call(cbind, test_data_2))
typeof(test_data_22)
# Set up helper data
set.seed(123) # for reproducibility
metric <- rep("accuracy", 30)
neighbors <- 1:30
mean <- rnorm(30)
test_data_2 <- cbind(metric, neighbors, mean)
typeof(test_data_2)
expected_accuracy_plot <- ggplot(do.call(rbind.data.frame, test_data_2), aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
test_data_2 <- data.frame(metric, neighbors, mean)
typeof(test_data_2)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(do.call(rbind.data.frame, test_data_2),
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
names(test_data_2)
View(test_data_2)
# Set up helper data
test_data_2 <- data.frame(
{{.metric}} = rep("accuracy", 30),
View(test_data_2)
# Set up helper data
test_data_2 <- data.frame(
metric = paste0(".", rep("accuracy", 30)),
neighbors = 1:30,
mean = rnorm(30)
)
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
# Test case 4
test_that("accuracy_plot produces the correct title", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ggtitle(plot)$labels, ggtitle(expected_accuracy_plot)$labels)
})
# Test case 3
test_that("accuracy_plot produces the correct y-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ylab(plot)$label, ylab(expected_accuracy_plot)$label)
})
styler:::style_active_file()
names(test_data_2)
styler:::style_active_file()
load_all()
# Test case 4
test_that("scatterplot produces the correct title", {
# Set up helper data
test_data_1 <- data.frame(
x = c(1, 2, 3, 4), y = c(10, 20, 30, 40),
color = c("red", "blue", "green", "red")
)
x_var <- "x"
y_var <- "y"
color_var <- "color"
x_label <- "x"
y_label <- "y"
color_label <- "Color"
plot_title <- "Test Plot"
plot_width <- 6
plot_height <- 4
options(repr.plot.width = plot_width, repr.plot.height = plot_height)
expected_scatter_plot <- ggplot(test_data_1, aes(x = x, y = y, color = color)) +
geom_point() +
theme(text = element_text(size = 18)) +
labs(x = "x", y = "y", color = "Color", title = "Test Plot")
# Call the function
plot <- scatterplot(test_data_1, "x", "y", "color", "x", "y", "Color",
"Test Plot",
plot_width = 6, plot_height = 4
)
expect_equal(ggtitle(plot)$labels, ggtitle(expected_scatter_plot)$labels)
})
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
# Test case 2
test_that("accuracy_plot produces the correct x-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(xlab(plot)$label, xlab(expected_accuracy_plot)$label)
})
load_all()
# Test case 4
test_that("scatterplot produces the correct title", {
# Set up helper data
test_data_1 <- data.frame(
x = c(1, 2, 3, 4), y = c(10, 20, 30, 40),
color = c("red", "blue", "green", "red")
)
x_var <- "x"
y_var <- "y"
color_var <- "color"
x_label <- "x"
y_label <- "y"
color_label <- "Color"
plot_title <- "Test Plot"
plot_width <- 6
plot_height <- 4
options(repr.plot.width = plot_width, repr.plot.height = plot_height)
expected_scatter_plot <- ggplot(test_data_1, aes(x = x, y = y, color = color)) +
geom_point() +
theme(text = element_text(size = 18)) +
labs(x = "x", y = "y", color = "Color", title = "Test Plot")
# Call the function
plot <- scatterplot(test_data_1, "x", "y", "color", "x", "y", "Color",
"Test Plot",
plot_width = 6, plot_height = 4
)
expect_equal(ggtitle(plot)$labels, ggtitle(expected_scatter_plot)$labels)
})
# Test case 2
test_that("accuracy_plot produces the correct x-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(xlab(plot)$label, xlab(expected_accuracy_plot)$label)
})
load_all()
# Test case 4
test_that("scatterplot produces the correct title", {
# Set up helper data
test_data_1 <- data.frame(
x = c(1, 2, 3, 4), y = c(10, 20, 30, 40),
color = c("red", "blue", "green", "red")
)
x_var <- "x"
y_var <- "y"
color_var <- "color"
x_label <- "x"
y_label <- "y"
color_label <- "Color"
plot_title <- "Test Plot"
plot_width <- 6
plot_height <- 4
options(repr.plot.width = plot_width, repr.plot.height = plot_height)
expected_scatter_plot <- ggplot(test_data_1, aes(x = x, y = y, color = color)) +
geom_point() +
theme(text = element_text(size = 18)) +
labs(x = "x", y = "y", color = "Color", title = "Test Plot")
# Call the function
plot <- scatterplot(test_data_1, "x", "y", "color", "x", "y", "Color",
"Test Plot",
plot_width = 6, plot_height = 4
)
expect_equal(ggtitle(plot)$labels, ggtitle(expected_scatter_plot)$labels)
})
# Test case 2
test_that("accuracy_plot produces the correct x-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(xlab(plot)$label, xlab(expected_accuracy_plot)$label)
})
# Test case 3
test_that("accuracy_plot produces the correct y-axis label", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ylab(plot)$label, ylab(expected_accuracy_plot)$label)
})
# Test case 4
test_that("accuracy_plot produces the correct title", {
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
expected_accuracy_plot <- ggplot(test_data_2, aes(x = neighbors, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Neighbors", y = "Mean", title = "Accuracy Plot") +
theme(text = element_text(size = 20)) +
scale_x_continuous(breaks = c(1:30))
# Call the function
plot <- accuracy_plot(test_data_2,
x_label = "Neighbors", y_label = "Mean",
plot_title = "Accuracy Plot"
)
expect_equal(ggtitle(plot)$labels, ggtitle(expected_accuracy_plot)$labels)
})
load_all()
test()
load_all()
test()
check()
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
# Set up helper data
test_data_2 <- data.frame(
.metric = rep("accuracy", 30),
neighbors = 1:30,
mean = rnorm(30)
)
View(test_data_2)
View(test_data_2)
load_all()
test()
document()
load_all()
check()
