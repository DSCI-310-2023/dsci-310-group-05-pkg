library(devtools)
install.packages("vctrs")
library(devtools)
check()
use_r("create_knn_spec")
#' Create a nearest neighbor specification object
#'
#' This function creates a specification object for use in training k-nearest
#' neighbor models for classification.The `weight_func` parameter specifies the
#' weight function to use and the specification object is returned for use in a
#' modeling workflow.
#'
#' @param weight_func A string specifying the weight function to use.
#' @return returns the specification object
#' @import parsnip
#' @export
#' @examples
#' create_knn_spec("rectangular")
create_knn_spec <- function(weight_func) {
if (missing(weight_func)) {
stop("weight_func must be provided.")
}
if (!is.character(weight_func)) {
stop("weight_func must be a character string.")
}
if (nchar(weight_func) == 0) {
stop("weight_func must not be an empty string.")
}
spec <-
parsnip::nearest_neighbor(
weight_func = weight_func,
neighbors = tune()
) %>%
parsnip::set_engine("kknn") %>%
parsnip::set_mode("classification")
return(spec)
}
document()
use_testthat()
use_test("create_knn_spec")
# Test create_knn function
# Test case 1
test_that("create_knn_spec sets the mode to classification", {
test_spec <- parsnip::nearest_neighbor(
weight_func = "rectangular",
neighbors = tune()
) %>%
parsnip::set_engine("kknn") %>%
parsnip::set_mode("classification")
expected_mode <- "classification"
spec <- create_knn_spec(weight_func = "rectangular")
expect_equal(test_spec$mode, expected_mode)
})
# Test case 1
test_that("create_knn_spec sets the mode to classification", {
test_spec <- parsnip::nearest_neighbor(
weight_func = "rectangular",
neighbors = tune()
) %>%
parsnip::set_engine("kknn") %>%
parsnip::set_mode("classification")
expected_mode <- "classification"
spec <- create_knn_spec(weight_func = "rectangular")
expect_equal(test_spec$mode, expected_mode)
})
library(testthat)
# Test case 1
test_that("create_knn_spec sets the mode to classification", {
test_spec <- parsnip::nearest_neighbor(
weight_func = "rectangular",
neighbors = tune()
) %>%
parsnip::set_engine("kknn") %>%
parsnip::set_mode("classification")
expected_mode <- "classification"
spec <- create_knn_spec(weight_func = "rectangular")
expect_equal(test_spec$mode, expected_mode)
})
# Test case 2
test_that("create_knn_spec sets the engine to kknn", {
test_spec <- parsnip::nearest_neighbor(
weight_func = "rectangular",
neighbors = tune()
) %>%
parsnip::set_engine("kknn") %>%
parsnip::set_mode("classification")
expected_engine <- "kknn"
expect_equal(test_spec$engine, expected_engine, "Expected engine to be kknn")
})
# Test case 3
test_that("create_knn_spec returns a model specification object", {
test_spec <- parsnip::nearest_neighbor(
weight_func = "rectangular",
neighbors = tune()
) %>%
parsnip::set_engine("kknn") %>%
parsnip::set_mode("classification")
expected_spec_class <- "model_spec"
expect_s3_class(test_spec, expected_spec_class)
})
# Test case 4
test_that("weight_func is a character", {
expect_error(create_knn_spec(123), "weight_func must be a character")
})
# Test case 5
test_that("create_knn_spec throws an error when weight_func is empty", {
expect_error(
create_knn_spec(""),
"weight_func must not be an empty string"
)
})
# Test case 6
test_that("create_knn_spec throws an error when no weight_func is passed", {
expect_error(
create_knn_spec(),
"weight_func must be provided"
)
})
install.packages(c("cachem", "cli", "colorspace", "commonmark", "cowsay", "curl", "dials", "dplyr", "fansi", "fastmap", "fs", "htmltools", "htmlwidgets", "igraph", "ipred", "IRkernel", "markdown", "modeldata", "modelenv", "pbdZMQ", "prodlim", "ps", "quantmod", "Rcpp", "renv", "repr", "stringi", "testthat", "tibble", "timechange", "tune", "utf8", "workflows", "workflowsets", "xfun"))
install.packages(c("cachem", "cli", "colorspace", "commonmark", "cowsay", "curl", "dials", "dplyr", "fansi", "fastmap", "fs", "htmltools", "htmlwidgets", "igraph", "ipred", "IRkernel", "markdown", "modeldata", "modelenv", "pbdZMQ", "prodlim", "ps", "quantmod", "Rcpp", "renv", "repr", "stringi", "testthat", "tibble", "timechange", "tune", "utf8", "workflows", "workflowsets", "xfun"))
install.packages(c("cachem", "cli", "colorspace", "commonmark", "cowsay", "curl", "dials", "dplyr", "fansi", "fastmap", "fs", "htmltools", "htmlwidgets", "igraph", "ipred", "IRkernel", "markdown", "modeldata", "modelenv", "pbdZMQ", "prodlim", "ps", "quantmod", "Rcpp", "renv", "repr", "stringi", "testthat", "tibble", "timechange", "tune", "utf8", "workflows", "workflowsets", "xfun"))
test()
library(devtools)
test()
use_r("create_recipe")
document()
use_test("create_recipe")
load_all()
check()
#' Create a recipe for a dataframe
#'
#' This function creates a recipe object for use in a modeling workflow.
#' The recipe includes a formula where the response variable is the
#' `response_var`and all other columns in the input dataframe are used as
#' predictors. The recipe object also includes steps for scaling and centering
#' the predictor variables.
#'
#' @param data A dataframe containing the data.
#' @param response_var A string specifying the name of the response variable.
#' @return A recipe object for use in a workflow.
#' @import recipes
#' @export
#' @examples
#' create_recipe(drug_data, "Cannabis")
create_recipe <- function(data, response_var) {
if (is.null(data)) {
stop("data must be provided.")
}
if (is.null(response_var)) {
stop("response_var must be provided.")
}
if (!is.character(response_var)) {
stop("response_var must be a character string.")
}
if (!response_var %in% colnames(data)) {
stop("response_var must be a column in data.")
}
recipe <-
recipes::recipe(as.formula(paste0(response_var, " ~ .")), data = data) %>%
recipes::step_scale(all_predictors()) %>%
recipes::step_center(all_predictors())
return(recipe)
}
check()
# Test case 1
test_that("create_recipe returns a recipe object", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
test_recipe <- recipes::recipe(as.formula(paste0(response_var, " ~ .")),
data = df
) %>%
recipes::step_scale(all_predictors()) %>%
recipes::step_center(all_predictors())
expected_recipe_class <- "recipe"
expect_s3_class(test_recipe, expected_recipe_class)
})
check()
document()
rm(list = c("create_recipe"))
document()
load_all()
check()
install()
check()
use_package("parsnip")
use_package("recipes")
check()
document()
check())
check()
check()
# Test case 1
test_that("create_recipe returns a recipe object", {
response_var = "Cannabis"
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
test_recipe <- recipes::recipe(as.formula(paste0(response_var, " ~ .")),
data = df
) %>%
recipes::step_scale(all_predictors()) %>%
recipes::step_center(all_predictors())
expected_recipe_class <- "recipe"
expect_s3_class(test_recipe, expected_recipe_class)
})
# Test case 2
test_that("create_recipe throws an error if response variable not in dataset", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
not_response_var <- "Test"
expect_error(
create_recipe(df, not_response_var),
"response_var must be a column in data."
)
})
# Test case 3
test_that("create_recipe throws an error when data is missing", {
response_var = "Cannabis"
expect_error(create_recipe(NULL, response_var), "data must be provided.")
})
# Test case 4
test_that("create_recipe throws an error when data is missing", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
expect_error(create_recipe(df, NULL), "response_var must be provided.")
})
# Test case 5
test_that("create_recipe throws an error when data is missing", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
expect_error(
create_recipe(df, 123),
"response_var must be a character string."
)
})
#' Create a recipe for a dataframe
#'
#' This function creates a recipe object for use in a modeling workflow.
#' The recipe includes a formula where the response variable is the
#' `response_var`and all other columns in the input dataframe are used as
#' predictors. The recipe object also includes steps for scaling and centering
#' the predictor variables.
#'
#' @param data A dataframe containing the data.
#' @param response_var A string specifying the name of the response variable.
#' @return A recipe object for use in a workflow.
#' @import recipes
#' @export
#' @examples
#' create_recipe(drug_data, "Cannabis")
create_recipe <- function(data, response_var) {
if (is.null(data)) {
stop("data must be provided.")
}
if (is.null(response_var)) {
stop("response_var must be provided.")
}
if (!is.character(response_var)) {
stop("response_var must be a character string.")
}
if (!response_var %in% colnames(data)) {
stop("response_var must be a column in data.")
}
recipe <-
recipes::recipe(as.formula(paste0(response_var, " ~ .")), data = data) %>%
recipes::step_scale(all_predictors()) %>%
recipes::step_center(all_predictors())
return(recipe)
}
document()
rm(list = c("create_recipe"))
load_all()
check()
install()
check()
use-r("create_vfold")
use_r("create_vfold")
document()
?create_vfold
use_test("create_vfold")
# Test case 1
test_that("create_vfold returns a valid vfold object", {
test_vfold <- rsample::vfold_cv(df, v = v_good, strata = response_var)
expected_num_splits <- 5
expect_is(test_vfold, expected_vfold_class)
expect_equal(length(test_vfold$splits), expected_num_splits)
})
# Test case 2
test_that("create_vfold throws an error when v is missing", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
response_var <- "Cannabis"
expect_error(create_vfold(df, NULL, response_var), "v must be provided.")
})
# Test case 1
test_that("create_vfold returns a valid vfold object", {
test_vfold <- rsample::vfold_cv(df, v = 5, strata = response_var)
expected_num_splits <- 5
expect_is(test_vfold, expected_vfold_class)
expect_equal(length(test_vfold$splits), expected_num_splits)
})
# Test case 1
test_that("create_vfold returns a valid vfold object", {
response_var = "Cannabis"
test_vfold <- rsample::vfold_cv(df, v = 5, strata = response_var)
expected_num_splits <- 5
expect_is(test_vfold, expected_vfold_class)
expect_equal(length(test_vfold$splits), expected_num_splits)
})
# Test case 1
test_that("create_vfold returns a valid vfold object", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
response_var <- "Cannabis"
test_vfold <- rsample::vfold_cv(df, v = 5, strata = response_var)
expected_num_splits <- 5
expect_is(test_vfold, expected_vfold_class)
expect_equal(length(test_vfold$splits), expected_num_splits)
})
# Test case 1
test_that("create_vfold returns a valid vfold object", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
response_var <- "Cannabis"
test_vfold <- rsample::vfold_cv(df, v = 5, strata = response_var)
expected_num_splits <- 5
expected_vfold_class <- "vfold_cv"
expect_is(test_vfold, expected_vfold_class)
expect_equal(length(test_vfold$splits), expected_num_splits)
})
# Test case 2
test_that("create_vfold throws an error when v is missing", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
response_var <- "Cannabis"
expect_error(create_vfold(df, NULL, response_var), "v must be provided.")
})
# Test case 3
test_that("create_vfold throws an error when v is not numeric", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
v_string <- "five"
response_var <- "Cannabis"
expect_error(
create_vfold(df, v_string, response_var),
"v must be a numeric value."
)
})
# Test case 4
test_that("create_vfold throws an error when v is less than 2", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
v_small <- 1
response_var <- "Cannabis"
expect_error(
create_vfold(df, v_small, response_var),
"v must be greater than or equal to 2."
)
})
expect_type(test_vfold, expected_vfold_class)
# Test case 1
test_that("create_vfold returns a valid vfold object", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
response_var <- "Cannabis"
test_vfold <- rsample::vfold_cv(df, v = 5, strata = response_var)
expected_num_splits <- 5
expected_vfold_class <- "vfold_cv"
expect_type(test_vfold, expected_vfold_class)
expect_equal(length(test_vfold$splits), expected_num_splits)
})
test()
# Test case 1
test_that("create_vfold returns a valid vfold object", {
df <- data.frame(
Age = c(3, 5, 6, 7, 8, 9),
Gender = c(-0.95197, 0.48246, -0.48246, -0.48246, 0.48246, -0.48246),
Nscore = c(-0.14882, -0.67825, -0.46725, -1.32828, 0.62967, -0.24649),
Escore = c(-0.80615, -0.30033, -1.09207, 1.93886, 2.57309, 0.00332),
Oscore = c(-0.01928, -1.55521, -0.45174, -0.84732, -0.97631, -1.42424),
Ascore = c(0.59042, 2.03972, -0.30172, -0.30172, 0.76096, 0.59042),
Nicotine = c(0, 1, 1, 0, 1, 1),
Cannabis = c("no", "no", "no", "no", "no", "no")
)
response_var <- "Cannabis"
test_vfold <- rsample::vfold_cv(df, v = 5, strata = response_var)
expected_num_splits <- 5
expected_vfold_class <- "vfold_cv"
expect_s3_class(test_vfold, expected_vfold_class)
expect_equal(length(test_vfold$splits), expected_num_splits)
})
load_all()
check()
load_all()
check()
document()
load_all()
check()
install()
check()
remove.packages("group05pkg")
install.packages("group05pkg")
install.packages("group05pkg")
check()
remove.packages("rdb")
system.file("R", package = "group05pkg")
unlink(file.path(system.file("R", package = "group05pkg"), "group05pkg.rdb"))
install()
document()
install.packages("group5pkg")
document()
library(devtools)
check()
