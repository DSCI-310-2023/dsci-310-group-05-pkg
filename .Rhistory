#### Extract basic info ####
nod_1 <- df
# make a positive/absolute version of nod_1
nod_1 <- nod_1 %>%
mutate(abs_yaw = abs(yaw))
# peak velocity
peak_velocity <- max(nod_1$abs_yaw)
# average velocity
avg_velocity <- mean(nod_1$abs_yaw)
# duration (in seconds)
# Obtain the first row
first_row <- slice(nod_1, 1)
# Obtain the last row
last_row <- slice(nod_1, n())
duration <- (last_row$timecourse - first_row$timecourse) / 1000
# amplitude
amp <- max(nod_1$yaw) - min(nod_1$yaw)
#### Use FFT to extract the peak frequency ####
# Perform Fourier analysis on the yaw column
fft_output <- fft(nod_1$yaw)
# Extract the frequencies and corresponding magnitudes
n <- ceiling(length(fft_output) / 2) # round up to nearest even number
mag <- abs(fft_output[1:n])/length(fft_output)
freq_bins <- seq(0, 50, length.out=n )
# Plot the frequency spectrum
plot(freq_bins, mag, type = "l", xlab = "Frequency", ylab = "Magnitude")
peak_freq <- freq_bins[which.max(mag)]
#### Create dataframe of results ####
nod_1_df <- data
wave_summary <- function(df, pID, nodID) {
#### Extract basic info ####
nod_1 <- df
# make a positive/absolute version of nod_1
nod_1 <- nod_1 %>%
mutate(abs_yaw = abs(yaw))
# peak velocity
peak_velocity <- max(nod_1$abs_yaw)
# average velocity
avg_velocity <- mean(nod_1$abs_yaw)
# duration (in seconds)
# Obtain the first row
first_row <- slice(nod_1, 1)
# Obtain the last row
last_row <- slice(nod_1, n())
duration <- (last_row$timecourse - first_row$timecourse) / 1000
# amplitude
amp <- max(nod_1$yaw) - min(nod_1$yaw)
#### Use FFT to extract the peak frequency ####
# Perform Fourier analysis on the yaw column
fft_output <- fft(nod_1$yaw)
# Extract the frequencies and corresponding magnitudes
n <- ceiling(length(fft_output) / 2) # round up to nearest even number
mag <- abs(fft_output[1:n])/length(fft_output)
freq_bins <- seq(0, 50, length.out=n )
# Plot the frequency spectrum
plot(freq_bins, mag, type = "l", xlab = "Frequency", ylab = "Magnitude")
peak_freq <- freq_bins[which.max(mag)]
#### Create dataframe of results ####
nod_1_df <- data.frame(pID = pID, nodID = nodID,
amplitude = amp,
duration = duration,
peak_velocity = peak_velocity,
avg_velocity = avg_velocity,
peak_frequency = peak_freq)
return(nod_1_df)
}
nod_1_df <- wave_summary(df, pID, nodID)
super_function <- function(raw_data, nod_start, nod_end, pID, nodID) {
df <- clean_df(raw_data)
df <- isolate_nod(nod_start, nod_end, df)
plot <- plot_it(df)
nod_df <- wave_summary(df, pID, nodID)
return(list(nod_df, plot))
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
compiled_df <- NULL
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
#nod_df <- super_function(raw_data, nod_start, nod_end, pID, nodID)
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
#compiled_df <- nod_df
compiled_df <- as.data.frame(nod_df)
} else {
compiled_df <- full_join(compiled_df, nod_df)
}
nodID <- nodID + 1
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
compiled_df <- NULL
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
#nod_df <- super_function(raw_data, nod_start, nod_end, pID, nodID)
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
#compiled_df <- nod_df
compiled_df <- as.data.frame(nod_df)
} else {
compiled_df <- full_join(compiled_df, as.data.frame(nod_df))
}
nodID <- nodID + 1
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
compiled_df <- NULL
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- full_join(compiled_df, nod_df)
}
nodID <- nodID + 1
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
#compiled_df <- NULL
compiled_df <- data.frame()
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- full_join(compiled_df, nod_df)
}
nodID <- nodID + 1
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
#compiled_df <- NULL
compiled_df <- data.frame()
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
nod_df <- bind_rows(nod_df)
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- full_join(compiled_df, nod_df)
}
nodID <- nodID + 1
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
#compiled_df <- NULL
compiled_df <- data.frame()
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
#compiled_df <- full_join(compiled_df, nod_df)
compiled_df <- dplyr::bind_rows(compiled_df, nod_df)
}
nodID <- nodID + 1
} else {
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
#compiled_df <- NULL
compiled_df <- data.frame()
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
#compiled_df <- full_join(compiled_df, nod_df)
compiled_df <- dplyr::bind_rows(compiled_df, nod_df)
}
nodID <- nodID + 1
}
nod_df
raw_data <- read.csv(file.choose())
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
#compiled_df <- NULL
compiled_df <- data.frame()
nod_df <- data.frame()
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- full_join(compiled_df, nod_df)
#compiled_df <- dplyr::bind_rows(compiled_df, nod_df)
}
nodID <- nodID + 1
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
#compiled_df <- NULL
compiled_df <- data.frame()
nod_df <- data.frame()
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- full_join(compiled_df, nod_df)
#compiled_df <- dplyr::bind_rows(compiled_df, nod_df)
}
nodID <- nodID + 1
}
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- full_join(compiled_df, nod_df, copy = TRUE)
#compiled_df <- dplyr::bind_rows(compiled_df, nod_df)
}
nodID <- nodID + 1
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 26 # Change pID for each participant
nodID <- 1 # stays constant
#compiled_df <- NULL
compiled_df <- data.frame()
nod_df <- data.frame()
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- (super_function(raw_data, nod_start, nod_end, pID, nodID))
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- dplyr::bind_rows(compiled_df, nod_df)
}
nodID <- nodID + 1
}
View(nod_df)
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(DT))
library(forecast)
library(signal)
#install.packages('tcltk')
library(tcltk)
clean_df <- function(df) {
df <- df %>%
dplyr::select(timestamp...0700., elapsed..s., y.axis..deg.s.) %>%
rename(timecourse = timestamp...0700., elapsed = elapsed..s., yaw = y.axis..deg.s.)
df <- df %>%
# remove calendar date
mutate(timecourse = gsub("^.{11}", "", timecourse)) %>%
# remove dots from timecourse. Note last three numbers rep milliseconds, not two
mutate(timecourse = gsub("\\.", "", timecourse)) %>%
# turn timecourse into a "num" class
mutate(timecourse = as.numeric(timecourse))
return(df)
}
isolate_nod <- function(nod_start, nod_end, df) {
nod_df <- df %>%
dplyr::filter(between(timecourse, nod_start, nod_end))
# Add numbered rows for simplicity
nod_df <- nod_df %>%
mutate(timecode = row_number())
return(nod_df)
}
plot_it <- function(df) {
nod_plot <- ggplot(df, aes(x = timecode, y = yaw)) +
geom_line()
nod_plot
}
wave_summary <- function(df, pID, nodID) {
#### Extract basic info ####
nod_1 <- df
# make a positive/absolute version of nod_1
nod_1 <- nod_1 %>%
mutate(abs_yaw = abs(yaw))
# peak velocity
peak_velocity <- max(nod_1$abs_yaw)
# average velocity
avg_velocity <- mean(nod_1$abs_yaw)
# duration (in seconds)
# Obtain the first row
first_row <- slice(nod_1, 1)
# Obtain the last row
last_row <- slice(nod_1, n())
duration <- (last_row$timecourse - first_row$timecourse) / 1000
# amplitude
amp <- max(nod_1$yaw) - min(nod_1$yaw)
#### Use FFT to extract the peak frequency ####
# Perform Fourier analysis on the yaw column
fft_output <- fft(nod_1$yaw)
# Extract the frequencies and corresponding magnitudes
n <- ceiling(length(fft_output) / 2) # round up to nearest even number
mag <- abs(fft_output[1:n])/length(fft_output)
freq_bins <- seq(0, 50, length.out=n )
# Plot the frequency spectrum
plot(freq_bins, mag, type = "l", xlab = "Frequency", ylab = "Magnitude")
peak_freq <- freq_bins[which.max(mag)]
#### Create dataframe of results ####
nod_1_df <- data.frame(pID = pID, nodID = nodID,
amplitude = amp,
duration = duration,
peak_velocity = peak_velocity,
avg_velocity = avg_velocity,
peak_frequency = peak_freq)
return(nod_1_df)
}
#nod_1_df <- wave_summary(df, pID, nodID)
super_function <- function(raw_data, nod_start, nod_end, pID, nodID) {
df <- clean_df(raw_data)
df <- isolate_nod(nod_start, nod_end, df)
plot <- plot_it(df)
nod_df <- wave_summary(df, pID, nodID)
return(list(nod_df, plot))
}
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(DT))
library(forecast)
library(signal)
install.packages('tcltk')
library(tcltk)
install.packages("tcltk")
clean_df <- function(df) {
df <- df %>%
select(timestamp...0700., elapsed..s., y.axis..deg.s.) %>%
rename(timecourse = timestamp...0700., elapsed = elapsed..s., yaw = y.axis..deg.s.)
df <- df %>%
# remove calendar date
mutate(timecourse = gsub("^.{11}", "", timecourse)) %>%
# remove dots from timecourse. Note last three numbers rep milliseconds, not two
mutate(timecourse = gsub("\\.", "", timecourse)) %>%
# turn timecourse into a "num" class
mutate(timecourse = as.numeric(timecourse))
return(df)
}
df <- clean_df(df)
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(DT))
library(forecast)
library(signal)
install.packages('tcltk')
library(tcltk)
install.packages("tcltk")
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(DT))
library(forecast)
library(signal)
#install.packages('tcltk')
library(tcltk)
clean_df <- function(df) {
df <- df %>%
select(timestamp...0700., elapsed..s., y.axis..deg.s.) %>%
rename(timecourse = timestamp...0700., elapsed = elapsed..s., yaw = y.axis..deg.s.)
df <- df %>%
# remove calendar date
mutate(timecourse = gsub("^.{11}", "", timecourse)) %>%
# remove dots from timecourse. Note last three numbers rep milliseconds, not two
mutate(timecourse = gsub("\\.", "", timecourse)) %>%
# turn timecourse into a "num" class
mutate(timecourse = as.numeric(timecourse))
return(df)
}
df <- clean_df(df)
isolate_nod <- function(nod_start, nod_end, df) {
nod_df <- df %>%
dplyr::filter(between(timecourse, nod_start, nod_end))
# Add numbered rows for simplicity
nod_df <- nod_df %>%
mutate(timecode = row_number())
return(nod_df)
}
df <- isolate_nod(nod_start, nod_end, df)
plot_it <- function(df) {
nod_plot <- ggplot(df, aes(x = timecode, y = yaw)) +
geom_line()
nod_plot
}
wave_summary <- function(df, pID, nodID) {
#### Extract basic info ####
nod_1 <- df
# make a positive/absolute version of nod_1
nod_1 <- nod_1 %>%
mutate(abs_yaw = abs(yaw))
# peak velocity
peak_velocity <- max(nod_1$abs_yaw)
# average velocity
avg_velocity <- mean(nod_1$abs_yaw)
# duration (in seconds)
# Obtain the first row
first_row <- slice(nod_1, 1)
# Obtain the last row
last_row <- slice(nod_1, n())
duration <- (last_row$timecourse - first_row$timecourse) / 1000
# amplitude
amp <- max(nod_1$yaw) - min(nod_1$yaw)
#### Use FFT to extract the peak frequency ####
# Perform Fourier analysis on the yaw column
fft_output <- fft(nod_1$yaw)
# Extract the frequencies and corresponding magnitudes
n <- ceiling(length(fft_output) / 2) # round up to nearest even number
mag <- abs(fft_output[1:n])/length(fft_output)
freq_bins <- seq(0, 50, length.out=n )
# Plot the frequency spectrum
plot(freq_bins, mag, type = "l", xlab = "Frequency", ylab = "Magnitude")
peak_freq <- freq_bins[which.max(mag)]
#### Create dataframe of results ####
nod_1_df <- data.frame(pID = pID, nodID = nodID,
amplitude = amp,
duration = duration,
peak_velocity = peak_velocity,
avg_velocity = avg_velocity,
peak_frequency = peak_freq)
return(nod_1_df)
}
nod_1_df <- wave_summary(df, pID, nodID)
super_function <- function(raw_data, nod_start, nod_end, pID, nodID) {
df <- clean_df(raw_data)
df <- isolate_nod(nod_start, nod_end, df)
plot <- plot_it(df)
nod_df <- wave_summary(df, pID, nodID)
return(list(nod_df, plot))
}
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 1 # Change pID for each participant
nodID <- 1 # stays constant
compiled_df <- NULL
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- super_function(raw_data, nod_start, nod_end, pID, nodID)
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- full_join(compiled_df, nod_df)
}
nodID <- nodID + 1
}
# Choose a folder containing CSV files
file_path <- file.choose()
View(compiled_df)
View(nod_df)
View(raw_data)
df <- clean_df(raw_data)
View(df)
df <- isolate_nod(nod_start = nod_start, nod_end = nod_end,df)
nod_plot <- plot_it(df)
nod_1_df <- wave_summary(df,26,1)
raw_data <- read.csv(file.choose())
nod_start_list <- c(133323900, 133504000)
nod_end_list <- c(133325492, 133506500)
pID <- 1 # Change pID for each participant
nodID <- 1 # stays constant
compiled_df <- NULL
for (i in seq_along(nod_start_list)) {
nod_start <- nod_start_list[i]
nod_end <- nod_end_list[i]
nod_df <- super_function(raw_data, nod_start, nod_end, pID, nodID)
if (is.null(compiled_df)) {
compiled_df <- nod_df
} else {
compiled_df <- full_join(compiled_df, nod_df)
}
nodID <- nodID + 1
}
View(nod_1_df)
nod_df <- super_function(raw_data, nod_start, nod_end, pID, nodID)
